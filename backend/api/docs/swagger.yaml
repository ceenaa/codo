basePath: /api/
definitions:
  controllers.CreateUserRequest:
    properties:
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  controllers.RatingOutput:
    properties:
      created_at:
        type: string
      rate:
        type: number
      rated_id:
        type: integer
      rater_id:
        type: integer
    type: object
  controllers.UserLoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  controllers.UserOutput:
    properties:
      average_rate:
        type: number
      created_at:
        type: string
      first_name:
        type: string
      given_ratings:
        items:
          $ref: '#/definitions/controllers.RatingOutput'
        type: array
      last_name:
        type: string
      recieved_ratings:
        items:
          $ref: '#/definitions/controllers.RatingOutput'
        type: array
      role:
        type: string
      total_raters:
        type: integer
      user_id:
        type: integer
      username:
        type: string
    type: object
  controllers.createRatingInput:
    properties:
      rate:
        type: number
      rated_username:
        type: string
    required:
    - rate
    - rated_username
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server Petstore server.
  title: Swagger Example API
  version: "1"
paths:
  /rating/create:
    post:
      consumes:
      - application/json
      description: Create a new rating
      parameters:
      - description: Rating
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.createRatingInput'
      produces:
      - application/json
      responses:
        "200":
          description: Rating created
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create a new rating
      tags:
      - Rating
  /users/{username}:
    get:
      description: Get the details of a user.
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/controllers.UserOutput'
        "404":
          description: User not found
          schema:
            type: string
      summary: Get user details
      tags:
      - Users
  /users/login:
    post:
      consumes:
      - application/json
      description: Log in a user with username and password.
      parameters:
      - description: User credentials
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.UserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User logged in
          schema:
            type: string
      summary: User login
      tags:
      - Authentication
  /users/logout:
    get:
      description: Log out the current user.
      produces:
      - application/json
      responses:
        "200":
          description: User logged out
          schema:
            type: string
      summary: User logout
      tags:
      - Authentication
  /users/signup:
    post:
      consumes:
      - application/json
      description: Register a new user account with a username and password.
      parameters:
      - description: User credentials
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User created
          schema:
            type: string
      summary: Create a new user account
      tags:
      - Authentication
  /users/validate:
    get:
      description: Check if the user is logged in and the session is valid.
      produces:
      - application/json
      responses:
        "200":
          description: User logged in" {string} string "User role
          schema:
            type: string
      summary: Validate user session
      tags:
      - Authentication
swagger: "2.0"
