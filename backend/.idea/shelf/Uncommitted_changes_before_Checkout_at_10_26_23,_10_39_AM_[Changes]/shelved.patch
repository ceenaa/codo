Index: api/models/pictureModel.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package models\n
===================================================================
diff --git a/api/models/pictureModel.go b/api/models/pictureModel.go
--- a/api/models/pictureModel.go	
+++ b/api/models/pictureModel.go	
@@ -1,1 +1,9 @@
 package models
+
+import "gorm.io/gorm"
+
+type Picture struct {
+	gorm.Model
+	location string
+	userID   uint
+}
Index: api/controllers/pictureController.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controllers\n
===================================================================
diff --git a/api/controllers/pictureController.go b/api/controllers/pictureController.go
--- a/api/controllers/pictureController.go	
+++ b/api/controllers/pictureController.go	
@@ -1,1 +1,23 @@
 package controllers
+
+//func UploadPicture(c *gin.Context) {
+//	file, err := c.FormFile("file")
+//	if err != nil {
+//		c.JSON(400, gin.H{"error": "Failed to upload picture"})
+//		return
+//	}
+//	user := c.MustGet("user").(models.User)
+//	// check if file name exists with user.Username
+//	// if exists, delete the file
+//
+//	-, err = os.Stat(filepath.join("../../../media", user.Username))
+//	if err == nil {
+//
+//	}
+//
+//	if err := c.SaveUploadedFile(file, "../../../media"+user.Username); err != nil {
+//		c.JSON(400, gin.H{"error": "Failed to upload picture"})
+//		return
+//	}
+//
+//}
