Index: api/controllers/userControllers.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controllers\n\nimport (\n\t\"backend/initializers\"\n\t\"backend/models\"\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/golang-jwt/jwt/v5\"\n\t\"golang.org/x/crypto/bcrypt\"\n\t\"net/http\"\n\t\"os\"\n\t\"strconv\"\n\t\"time\"\n)\n\ntype CreateUserRequest struct {\n\tUsername  string `json:\"username\"`\n\tFirstname string `json:\"first_name\"`\n\tLastname  string `json:\"last_name\"`\n\tPassword  string `json:\"password\"`\n\tRole      string `json:\"role\"`\n}\ntype UserLoginRequest struct {\n\tUsername string `json:\"username\"`\n\tPassword string `json:\"password\"`\n}\ntype UserOutput struct {\n\tCreatedAt   time.Time `json:\"created_at\"`\n\tID          uint      `json:\"user_id\"`\n\tUsername    string    `json:\"username\"`\n\tFirstName   string    `json:\"first_name\"`\n\tLastName    string    `json:\"last_name\"`\n\tAverageRate float64   `json:\"average_rate\"`\n\tTotalRaters uint      `json:\"total_raters\"`\n\tRole        string    `json:\"role\"`\n}\n\ntype UserMinimalOutput struct {\n\tID          uint    `json:\"user_id\"`\n\tUsername    string  `json:\"username\"`\n\tFirstName   string  `json:\"first_name\"`\n\tLastName    string  `json:\"last_name\"`\n\tRole        string  `json:\"role\"`\n\tAverageRate float64 `json:\"average_rate\"`\n}\n\n// @Summary Create a new user account\n// @Description Register a new user account with a username and password.\n// @Tags Authentication\n// @Accept json\n// @Produce json\n// @Param body body CreateUserRequest true \"User credentials\"\n// @Success 200 {string} string \"User created\"\n// @Router /users/signup [post]\nfunc SignUp(c *gin.Context) {\n\t// GET the email/Pas off req body\n\tvar body CreateUserRequest\n\n\tif c.Bind(&body) != nil {\n\t\tc.JSON(400, gin.H{\"error\": \"Fields to read body\"})\n\t\treturn\n\t}\n\n\t// Hash the password\n\thash, err := bcrypt.GenerateFromPassword([]byte(body.Password), bcrypt.DefaultCost)\n\n\tif err != nil {\n\t\tc.JSON(500, gin.H{\"error\": \"Failed to hash password\"})\n\t\treturn\n\t}\n\n\t// Create the user\n\tuser := models.User{\n\t\tUsername:  body.Username,\n\t\tFirstName: body.Firstname,\n\t\tLastName:  body.Lastname,\n\t\tRole:      body.Role,\n\t\tPassword:  string(hash),\n\t}\n\tresult := initializers.DB.Create(&user)\n\n\tif result.Error != nil {\n\t\tc.JSON(500, gin.H{\"error\": \"Failed to create user\"})\n\t\treturn\n\t}\n\t// Respond\n\n\tc.JSON(200, gin.H{\"message\": \"User created\"})\n}\n\n// @Summary User login\n// @Description Log in a user with username and password.\n// @Tags Authentication\n// @Accept json\n// @Produce json\n// @Param body body UserLoginRequest true \"User credentials\"\n// @Success 200 {string} string \"User logged in\"\n// @Router /users/login [post]\nfunc Login(c *gin.Context) {\n\t// Get the email and pass off req body\n\tvar body UserLoginRequest\n\n\tif c.Bind(&body) != nil {\n\t\tc.JSON(400, gin.H{\"error\": \"Fields to read body\"})\n\t\treturn\n\t}\n\n\t// Look up requested user\n\tvar user models.User\n\tinitializers.DB.First(&user, \"username = ?\", body.Username)\n\n\tif user.ID == 0 {\n\t\tc.JSON(http.StatusBadRequest, gin.H{\n\t\t\t\"error\": \"Invalid email or password\",\n\t\t})\n\t\treturn\n\t}\n\n\t// Compare sent in pass with saved user pass hash\n\terr := bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(body.Password))\n\tif err != nil {\n\t\tc.JSON(http.StatusBadRequest, gin.H{\n\t\t\t\"error\": \"Invalid email or password\",\n\t\t})\n\t\treturn\n\t}\n\n\t// Generate a go_auth token\n\ttoken := jwt.NewWithClaims(jwt.SigningMethodHS256, jwt.MapClaims{\n\t\t\"sub\": user.ID,\n\t\t\"exp\": time.Now().Add(time.Hour * 24 * 30).Unix(),\n\t})\n\n\t// Sign the token with our secret\n\ttokenString, err := token.SignedString([]byte(os.Getenv(\"SECRET\")))\n\n\tif err != nil {\n\t\tc.JSON(http.StatusBadRequest, gin.H{\n\t\t\t\"error\": \"Failed to generate token\",\n\t\t})\n\t\treturn\n\t}\n\t// send it back\n\tc.SetSameSite(http.SameSiteDefaultMode)\n\tc.SetCookie(\"Authorization\", tokenString, 3600*24*30, \"/\", \"localhost\", false, true)\n\n\tc.JSON(http.StatusOK, gin.H{})\n}\n\n// @Summary User logout\n// @Description Log out the current user.\n// @Tags Authentication\n// @Produce json\n// @Success 200 {string} string \"User logged out\"\n// @Router /users/logout [get]\nfunc Logout(c *gin.Context) {\n\tc.SetCookie(\"Authorization\", \"\", -1, \"/\", \"localhost\", false, true)\n}\n\n// @Summary Validate user session\n// @Description Check if the user is logged in and the session is valid.\n// @Tags Authentication\n// @Produce json\n// @Success 200 {string} string \"User logged in\" {string} string \"User role\"\n// @Router /users/validate [get]\nfunc Validate(c *gin.Context) {\n\tvar user models.User\n\tuser = c.MustGet(\"user\").(models.User)\n\n\tc.JSON(http.StatusOK, gin.H{\n\t\t\"message\":     \"Im logged in\",\n\t\t\"role\":        user.Role,\n\t\t\"username\":    user.Username,\n\t\t\"first_name\":  user.FirstName,\n\t\t\"last_name\":   user.LastName,\n\t\t\"AverageRate\": user.AverageRate,\n\t})\n}\n\n// @Summary Get user details\n// @Description Get the details of a user.\n// @Tags Users\n// @Produce json\n// @Param username path string true \"Username\"\n// @Success 200 {string} string \"User details\"\n// @Router /users/{username} [get]\n// @Response 404 {string} string \"User not found\"\n// @Response 200 {object} UserOutput \"User details\" {int} rank \"User rank\"\nfunc UserDetails(c *gin.Context) {\n\tvar user UserOutput\n\tusername := c.Param(\"username\")\n\tinitializers.DB.Model(&models.User{}).Where(\"username = ?\", username).First(&user)\n\tif user.ID == 0 {\n\t\tc.JSON(404, gin.H{\"error\": \"User not found\"})\n\t\treturn\n\t}\n\tvar rank int64\n\tinitializers.DB.Model(&models.User{}).Order(\"average_rate desc\").Where(\"average_rate > ?\", user.AverageRate).Count(&rank)\n\n\tc.JSON(http.StatusOK, gin.H{\n\t\t\"user\": user,\n\t\t\"rank\": rank + 1,\n\t})\n\n}\n\n// @Summary Get user list\n// @Description Get a list of users.\n// @Tags Users\n// @Produce json\n// @Param order_by query string false \"Order by\"\n// @Param order query string false \"Order\"\n// @Param text query string false \"Text\"\n// @Param page query int false \"Page\"\n// @Param per_page query int false \"Per page\"\n// @Success 200 {string} string \"Users\"\n// @Router /users/list [get]\nfunc UserList(c *gin.Context) {\n\tvar users []UserMinimalOutput\n\ttext := c.Query(\"text\")\n\torderBy := c.DefaultQuery(\"order_by\", \"average_rate\")\n\torder := c.DefaultQuery(\"order\", \"desc\")\n\tpage := c.DefaultQuery(\"page\", \"1\")\n\tperPage := c.DefaultQuery(\"per_page\", \"10\")\n\tpageNum, err := strconv.Atoi(page)\n\tif err != nil {\n\t\tc.JSON(400, gin.H{\"error\": \"Page must be a number\"})\n\t\treturn\n\t}\n\tperPageNum, err := strconv.Atoi(perPage)\n\tif err != nil {\n\t\tc.JSON(400, gin.H{\"error\": \"Per page must be a number\"})\n\t\treturn\n\t}\n\tstartIdx := (pageNum - 1) * perPageNum\n\t// search for users with text in username or first name or last name\n\tquerySet := initializers.DB.Model(&models.User{}).Where(\"username LIKE ? OR first_name LIKE ? OR last_name LIKE ?\", \"%\"+text+\"%\", \"%\"+text+\"%\", \"%\"+text+\"%\").Limit(perPageNum).Offset(startIdx)\n\tquerySet.Order(orderBy + \" \" + order).Find(&users)\n\n\tc.JSON(http.StatusOK, gin.H{\n\t\t\"users\": users,\n\t})\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/controllers/userControllers.go b/api/controllers/userControllers.go
--- a/api/controllers/userControllers.go	
+++ b/api/controllers/userControllers.go	
@@ -184,7 +184,7 @@
 // @Success 200 {string} string "User details"
 // @Router /users/{username} [get]
 // @Response 404 {string} string "User not found"
-// @Response 200 {object} UserOutput "User details" {int} rank "User rank"
+// @Response 200 {object} UserOutput "User details" {int}, rank "User rank"
 func UserDetails(c *gin.Context) {
 	var user UserOutput
 	username := c.Param("username")
Index: ../frontend/src/main.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// react\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter } from 'react-router-dom';\n\n// redux\nimport { Provider } from 'react-redux';\nimport store from './services/redux/Store';\n\n// global styles\nimport './Styles/app.css';\n\n// components\nimport App from './App';\n\n// react query client\nimport { QueryClient, QueryClientProvider } from 'react-query';\nconst client = new QueryClient();\n\n// main\nReactDOM.createRoot(document.getElementById('root') as HTMLElement).render(\n\t<QueryClientProvider client={client}>\n\t\t<Provider store={store}>\n\t\t\t{/* router */}\n\t\t\t<BrowserRouter>\n\t\t\t\t{/* application */}\n\t\t\t\t<App />\n\t\t\t</BrowserRouter>\n\t\t</Provider>\n\t</QueryClientProvider>\n);\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../frontend/src/main.tsx b/../frontend/src/main.tsx
--- a/../frontend/src/main.tsx	
+++ b/../frontend/src/main.tsx	
@@ -7,7 +7,7 @@
 import store from './services/redux/Store';
 
 // global styles
-import './Styles/app.css';
+import './styles/app.css';
 
 // components
 import App from './App';
